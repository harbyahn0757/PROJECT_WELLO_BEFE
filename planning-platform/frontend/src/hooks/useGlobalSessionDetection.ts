/**
 * Ï†ÑÏó≠ ÏÑ∏ÏÖò Í∞êÏßÄ ÌõÖ
 * Î™®Îì† ÌéòÏù¥ÏßÄÏóêÏÑú ÏßÑÌñâ Ï§ëÏù∏ Redis ÏÑ∏ÏÖòÏùÑ Í∞êÏßÄÌïòÍ≥† Ï†ÅÏ†àÌïú ÌôîÎ©¥ÏúºÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
 */
import { useEffect, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';

// API ÏóîÎìúÌè¨Ïù∏Ìä∏ (Í∏∞Ï°¥ configÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞)
const TILKO_API = {
  SESSION_STATUS: (sessionId: string) => `/wello-api/v1/tilko/session/status/${sessionId}`
};

interface SessionDetectionOptions {
  enabled?: boolean;
  checkInterval?: number; // ms
  maxSessionAge?: number; // ms
}

interface SessionStatus {
  sessionId: string | null;
  status: string | null;
  isActive: boolean;
  isCollecting: boolean;
  shouldRedirect: boolean;
  redirectPath: string | null;
}

export const useGlobalSessionDetection = (options: SessionDetectionOptions = {}) => {
  const {
    enabled = true,
    checkInterval = 30000, // 30Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨
    maxSessionAge = 30 * 60 * 1000 // 30Î∂Ñ
  } = options;

  const navigate = useNavigate();
  const location = useLocation();

  const checkSessionStatus = useCallback(async (): Promise<SessionStatus> => {
    const defaultStatus: SessionStatus = {
      sessionId: null,
      status: null,
      isActive: false,
      isCollecting: false,
      shouldRedirect: false,
      redirectPath: null
    };

    try {
      // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÏÑ∏ÏÖò Ï†ïÎ≥¥ ÌôïÏù∏
      const savedSessionId = localStorage.getItem('tilko_session_id');
      const savedSessionData = localStorage.getItem('tilko_session_data');

      if (!savedSessionId || !savedSessionData) {
        console.log('üì≠ [Ï†ÑÏó≠ÏÑ∏ÏÖò] Ï†ÄÏû•Îêú ÏÑ∏ÏÖò ÏóÜÏùå');
        return defaultStatus;
      }

      const sessionData = JSON.parse(savedSessionData);
      
      // ÏÑ∏ÏÖò ÎßåÎ£å ÏãúÍ∞Ñ Ï≤¥ÌÅ¨
      const sessionAge = Date.now() - new Date(sessionData.created_at).getTime();
      if (sessionAge > maxSessionAge) {
        console.log('‚è∞ [Ï†ÑÏó≠ÏÑ∏ÏÖò] ÏÑ∏ÏÖò ÎßåÎ£åÎê® (30Î∂Ñ Ï¥àÍ≥º)');
        // ÎßåÎ£åÎêú ÏÑ∏ÏÖò Ï†ïÎ¶¨
        localStorage.removeItem('tilko_session_id');
        localStorage.removeItem('tilko_session_data');
        return defaultStatus;
      }

      console.log('üîç [Ï†ÑÏó≠ÏÑ∏ÏÖò] ÏÑúÎ≤Ñ ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏:', savedSessionId);

      // ÏÑúÎ≤ÑÏóêÏÑú Ïã§Ï†ú ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏
      const response = await fetch(TILKO_API.SESSION_STATUS(savedSessionId));
      
      if (!response.ok) {
        console.error('‚ùå [Ï†ÑÏó≠ÏÑ∏ÏÖò] ÏÑ∏ÏÖò ÏÉÅÌÉú API Ìò∏Ï∂ú Ïã§Ìå®:', response.status);
        return defaultStatus;
      }

      const result = await response.json();
      console.log('üìä [Ï†ÑÏó≠ÏÑ∏ÏÖò] ÏÑúÎ≤Ñ ÏùëÎãµ:', result);

      if (!result.success || !result.status) {
        console.log('‚ö†Ô∏è [Ï†ÑÏó≠ÏÑ∏ÏÖò] ÏÑ∏ÏÖò ÏÉÅÌÉú ÏùëÎãµ Ïò§Î•ò');
        return defaultStatus;
      }

      const status = result.status;
      const isActive = !['error', 'completed'].includes(status);
      const isCollecting = ['fetching_health_data', 'fetching_prescription_data'].includes(status);

      // Î¶¨Îã§Ïù¥Î†âÌä∏ ÌïÑÏöî Ïó¨Î∂Ä ÌåêÎã®
      let shouldRedirect = false;
      let redirectPath = null;

      // ÌòÑÏû¨ URL ÌååÎùºÎØ∏ÌÑ∞ ÌôïÏù∏
      const urlParams = new URLSearchParams(location.search);
      const uuid = urlParams.get('uuid');
      const hospital = urlParams.get('hospital');

      if (isActive && uuid && hospital) {
        // Ïù∏Ï¶ù Í¥ÄÎ†® ÏÉÅÌÉú
        if (['auth_pending', 'auth_completed', 'authenticated', 'auth_waiting'].includes(status)) {
          // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÍ∞Ä ÏïÑÎãàÎ©¥ Î¶¨Îã§Ïù¥Î†âÌä∏
          if (!location.pathname.includes('/login')) {
            shouldRedirect = true;
            redirectPath = `/login?uuid=${uuid}&hospital=${hospital}`;
          }
        }
        // Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï§ë ÏÉÅÌÉú
        else if (isCollecting) {
          // ÌòÑÏû¨ ÏàòÏßë Ï§ë ÌôîÎ©¥Ïù¥ ÏïÑÎãàÎ©¥ Î¶¨Îã§Ïù¥Î†âÌä∏
          if (!location.pathname.includes('/collecting')) {
            shouldRedirect = true;
            redirectPath = `/collecting?uuid=${uuid}&hospital=${hospital}&session=${savedSessionId}`;
          }
        }
        // ÏôÑÎ£å ÏÉÅÌÉú
        else if (status === 'completed') {
          // Í≤∞Í≥º ÌôîÎ©¥ÏúºÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
          if (!location.pathname.includes('/results')) {
            shouldRedirect = true;
            redirectPath = `/results-trend?uuid=${uuid}&hospital=${hospital}`;
          }
        }
      }

      return {
        sessionId: savedSessionId,
        status,
        isActive,
        isCollecting,
        shouldRedirect,
        redirectPath
      };

    } catch (error) {
      console.error('‚ùå [Ï†ÑÏó≠ÏÑ∏ÏÖò] ÏÑ∏ÏÖò ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:', error);
      return defaultStatus;
    }
  }, [location, maxSessionAge]);

  const handleSessionRedirect = useCallback(async () => {
    if (!enabled) return;

    const sessionStatus = await checkSessionStatus();

    if (sessionStatus.shouldRedirect && sessionStatus.redirectPath) {
      console.log('üîÑ [Ï†ÑÏó≠ÏÑ∏ÏÖò] Î¶¨Îã§Ïù¥Î†âÌä∏:', sessionStatus.redirectPath);
      navigate(sessionStatus.redirectPath);
    }
  }, [enabled, checkSessionStatus, navigate]);

  // Ï¥àÍ∏∞ ÏÑ∏ÏÖò Ï≤¥ÌÅ¨
  useEffect(() => {
    handleSessionRedirect();
  }, [handleSessionRedirect]);

  // Ï£ºÍ∏∞Ï†Å ÏÑ∏ÏÖò Ï≤¥ÌÅ¨
  useEffect(() => {
    if (!enabled) return;

    const interval = setInterval(() => {
      handleSessionRedirect();
    }, checkInterval);

    return () => clearInterval(interval);
  }, [enabled, checkInterval, handleSessionRedirect]);

  // Ïä§ÌÜ†Î¶¨ÏßÄ Î≥ÄÍ≤Ω Í∞êÏßÄ (Îã§Î•∏ ÌÉ≠ÏóêÏÑúÏùò Î≥ÄÍ≤ΩÏÇ¨Ìï≠)
  useEffect(() => {
    if (!enabled) return;

    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'tilko_session_id' || e.key === 'tilko_session_data') {
        console.log('üîÑ [Ï†ÑÏó≠ÏÑ∏ÏÖò] Ïä§ÌÜ†Î¶¨ÏßÄ Î≥ÄÍ≤Ω Í∞êÏßÄ');
        handleSessionRedirect();
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [enabled, handleSessionRedirect]);

  return {
    checkSessionStatus,
    handleSessionRedirect
  };
};

export default useGlobalSessionDetection;

